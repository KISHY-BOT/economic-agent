openapi: 3.1.0
info:
  title: Economic Agent API (Hybrid-Pro)
  version: "2.1.0"

servers:
  - url: https://economic-agent-production.up.railway.app
    description: Production server

security:
  - ApiKeyAuth: []   # Por defecto, protegido (se anula en health/metrics)

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key

  schemas:
    RunConfig:
      type: object
      properties:
        horizon:
          type: integer
          default: 30
          minimum: 1
        models:
          type: array
          items:
            type: string
            enum: [arima, random_forest, monte_carlo]
          default: [arima, random_forest, monte_carlo]
        series:
          type: object
          nullable: true
          description: >
            Si no se provee, el backend consulta BCRA id_var=7 por defecto.
            Formatos soportados:
            - { id_var, desde?, hasta? }
            - { data: [{fecha, valor}, ...] }  # serie custom
        notes:
          type: string
          nullable: true
        async_mode:
          type: boolean
          default: false

    AgentResult:
      type: object
      additionalProperties: true
      properties:
        meta:
          type: object
          properties:
            source: { type: string, enum: [BCRA, custom] }
            horizon_days: { type: integer }
            models:
              type: array
              items: { type: string, enum: [arima, random_forest, monte_carlo] }
            last_value: { type: number, nullable: true }
            last_date: { type: string, format: date, nullable: true }
            notes: { type: string, nullable: true }
        input_len: { type: integer }
        forecasts:
          type: object
          additionalProperties: true
          properties:
            arima:
              type: array
              items:
                type: object
                properties:
                  fecha: { type: string, format: date }
                  valor: { type: number }
            random_forest:
              type: array
              items:
                type: object
                properties:
                  fecha: { type: string, format: date }
                  valor: { type: number }
            monte_carlo:
              type: object
              properties:
                median:
                  type: array
                  items:
                    type: object
                    properties:
                      fecha: { type: string, format: date }
                      valor: { type: number }
                bands:
                  type: object
                  properties:
                    p10_first: { type: number }
                    p90_first: { type: number }
                    p10_last:  { type: number }
                    p90_last:  { type: number }

    RunSyncResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/AgentResult'
      required: [result]

    RunAsyncResponse:
      type: object
      properties:
        job_id:
          type: string
          format: uuid
        status:
          type: string
          enum: [queued]
          example: queued
      required: [job_id, status]

    JobStatus:
      type: object
      properties:
        status:
          type: string
          enum: [queued, running, done, failed]
        config:
          $ref: '#/components/schemas/RunConfig'
        result:
          $ref: '#/components/schemas/AgentResult'
        error:
          type: string
      required: [status]

paths:
  /health:
    get:
      operationId: health
      summary: Health
      description: Healthcheck del servicio.
      security: []   # público
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true

  /metrics:
    get:
      operationId: metrics
      summary: Métricas (Prometheus text)
      security: []   # público
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: |
                  econ_jobs_total 0
                  econ_jobs_running 0
                  econ_jobs_done 0
                  econ_jobs_failed 0

  /metrics.json:
    get:
      operationId: metricsJson
      summary: Métricas en formato JSON
      security: []   # público
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  econ_jobs_total:   { type: integer, example: 0 }
                  econ_jobs_running: { type: integer, example: 0 }
                  econ_jobs_done:    { type: integer, example: 0 }
                  econ_jobs_failed:  { type: integer, example: 0 }

  # ======= BCRA endpoints existentes =======
  /bcra/principales-variables:
    get:
      operationId: principalesVariablesList
      summary: Listado de principales variables del BCRA (v1.0 passthrough)
      responses:
        "200":
          description: OK (JSON o texto según upstream)
          content:
            application/json: { schema: {} }
            text/plain: { schema: { type: string } }
        "502":
          description: Error upstream BCRA

  /bcra/principales-variables/{id_var}:
    get:
      operationId: principalesVariablesData
      summary: Series de una variable del BCRA (v1.0 passthrough)
      parameters:
        - in: path
          name: id_var
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: OK (JSON o texto según upstream)
          content:
            application/json: { schema: {} }
            text/plain: { schema: { type: string } }
        "502":
          description: Error upstream BCRA

  /bcra/cheques/entidades:
    get:
      operationId: chequesEntidades
      summary: Listado de entidades bancarias (v1.0 passthrough)
      responses:
        "200":
          description: OK (JSON o texto según upstream)
          content:
            application/json: { schema: {} }
            text/plain: { schema: { type: string } }
        "502":
          description: Error upstream BCRA

  # ======= BCRA stubs adicionales (ajustados a docs) =======
  /bcra/cheques/denunciados/{codigo_entidad}/{numero_cheque}:
    get:
      operationId: chequesDenunciados
      summary: Consulta si un cheque está denunciado (passthrough)
      parameters:
        - in: path
          name: codigo_entidad
          required: true
          schema: { type: integer }
        - in: path
          name: numero_cheque
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: OK (JSON o texto según upstream)
          content:
            application/json: { schema: {} }
            text/plain: { schema: { type: string } }
        "502":
          description: Error upstream BCRA

  /bcra/deudores/{identificacion}:
    get:
      operationId: deudores
      summary: Central de Deudores por identificación (11 dígitos) – passthrough
      parameters:
        - in: path
          name: identificacion
          required: true
          schema:
            type: string
            pattern: "^[0-9]{11}$"
            example: "20123456789"
      responses:
        "200":
          description: OK (JSON o texto según upstream)
          content:
            application/json: { schema: {} }
            text/plain: { schema: { type: string } }
        "400":
          description: Parámetros inválidos
        "502":
          description: Error upstream BCRA

  /bcra/estadisticas-cambiarias/maestros/divisas:
    get:
      operationId: cambiariasMaestrosDivisas
      summary: Maestro de divisas (monedas ISO) – passthrough
      responses:
        "200":
          description: OK (JSON o texto según upstream)
          content:
            application/json: { schema: {} }
            text/plain: { schema: { type: string } }
        "502":
          description: Error upstream BCRA

  /bcra/estadisticas-cambiarias/cotizaciones:
    get:
      operationId: cambiariasCotizaciones
      summary: Cotizaciones cambiarias del BCRA (última o por fecha) – passthrough
      parameters:
        - in: query
          name: fecha
          schema:
            type: string
            format: date
            example: "2025-08-14"
      responses:
        "200":
          description: OK (JSON o texto según upstream)
          content:
            application/json: { schema: {} }
            text/plain: { schema: { type: string } }
        "400":
          description: Parámetros inválidos
        "502":
          description: Error upstream BCRA

  /bcra/estadisticas-cambiarias/cotizaciones/{moneda}:
    get:
      operationId: cambiariasEvolucion
      summary: Evolución histórica de cotización de una moneda – passthrough
      parameters:
        - in: path
          name: moneda
          required: true
          schema:
            type: string
            example: "EUR"
        - in: query
          name: fechadesde
          schema:
            type: string
            format: date
            example: "2025-08-01"
        - in: query
          name: fechahasta
          schema:
            type: string
            format: date
            example: "2025-08-14"
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 10
            maximum: 1000
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
      responses:
        "200":
          description: OK (JSON o texto según upstream)
          content:
            application/json: { schema: {} }
            text/plain: { schema: { type: string } }
        "400":
            description: Parámetros inválidos
        "502":
          description: Error upstream BCRA

  /bcra/monetarias/{id_var}:
    get:
      operationId: monetarias
      summary: Serie monetaria v3 por ID con filtro de fechas/paginado – passthrough
      parameters:
        - in: path
          name: id_var
          required: true
          schema: { type: integer }
          example: 7
        - in: query
          name: desde
          schema:
            type: string
            format: date
            example: "2025-08-05"
        - in: query
          name: hasta
          schema:
            type: string
            format: date
            example: "2025-08-11"
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 3000
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
      responses:
        "200":
          description: OK (JSON o texto según upstream)
          content:
            application/json: { schema: {} }
            text/plain: { schema: { type: string } }
        "400":
          description: Parámetros inválidos
        "502":
          description: Error upstream BCRA

  /bcra/passthrough:
    get:
      operationId: bcraPassthrough
      summary: Proxy a cualquier path público del BCRA (passthrough genérico)
      parameters:
        - in: query
          name: path
          required: true
          description: Path comenzando con "/" y URL-encoded. Ej: /estadisticas/v3.0/monetarias/7
          schema: { type: string }
      responses:
        "200":
          description: OK (JSON o texto según upstream)
          content:
            application/json: { schema: {} }
            text/plain: { schema: { type: string } }
        "400":
          description: Parámetros inválidos
        "502":
          description: Error upstream BCRA

  # ======= Agent =======
  /run:
    post:
      operationId: runAgent
      summary: Ejecuta el agente económico (sync o async)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunConfig'
            examples:
              sync:
                summary: Ejecución síncrona
                value: { horizon: 5, models: ["arima","random_forest"], async_mode: false }
              async:
                summary: Ejecución asíncrona
                value: { horizon: 5, models: ["arima","random_forest"], async_mode: true }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/RunSyncResponse'
                  - $ref: '#/components/schemas/RunAsyncResponse'
        "401":
          description: API key inválida
        "429":
          description: Rate limit excedido

  /status/{job_id}:
    get:
      operationId: jobStatus
      summary: Estado de un job asíncrono
      parameters:
        - in: path
          name: job_id
          required: true
          schema: { type: string }
          example: "23cd9fd9-ed33-48c2-acdb-ecafed064fa9"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatus'
        "401":
          description: API key inválida
        "404":
          description: Job no encontrado
        "429":
          description: Rate limit excedido
